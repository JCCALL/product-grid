{"version":3,"sources":["components/utils/API.js","components/Buttons/index.js","components/Delete/index.js","components/Product-Grid/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","body","post","id","delete","Buttons","props","closeModal","setState","show","handleShow","refreshPage","window","location","reload","state","inputTitle","inputDescription","inputQuantity","inputPrice","inputImage","handleInputChange","bind","handleSubmit","event","value","target","this","name","preventDefault","data","title","description","quantity","price","image","API","then","res","console","log","type","className","onClick","Modal","onHide","aria-labelledby","Header","closeButton","Title","onSubmit","Body","htmlFor","placeholder","onChange","Footer","Component","Delete","role","tabIndex","ProductGrid","loadProducts","products","map","product","deleteProduct","catch","err","onSortChange","nextSort","currentSort","scope","key","src","alt","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b8235d9a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  // Gets all products\n  getProducts: function() {\n    return axios.get(\"/api/products/\");\n  },\n  \n  // create \n  createProduct: function(body) {\n    return axios.post(\"/api/products/new\", body);\n  },\n  \n  // updates\n  changeProduct: function(id) {\n    return axios.put(\"/api/products/\" + id);\n  },\n  \n  //delete\n  deleteProduct: function(id) {\n    return axios.delete(\"/api/products/\" + id);\n  },\n};\n","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport API from \"../utils/API\";\nimport Modal from 'react-bootstrap/Modal';\n\nclass Buttons extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputTitle: \"\",\n            inputDescription: \"\",\n            inputQuantity: 0,\n            inputPrice: 0,\n            inputImage: \"\",\n            show: false\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    closeModal = () => this.setState({ show: false })\n    handleShow = () => this.setState({ show: true })\n\n    refreshPage = () => {\n        window.location.reload(false);\n    }\n\n    handleInputChange(event) {\n        const value = event.target.value;\n\n        this.setState({\n            [event.target.name]: value\n        });\n        \n    }\n\n\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const data = {\n            title: this.state.inputTitle,\n            description: this.state.inputDescription,\n            quantity: this.state.inputQuantity,\n            price: this.state.inputPrice,\n            image: this.state.inputImage,\n        }\n        let show = this.state.show\n        API.createProduct(data, show).then((res) => {\n            console.log(res);\n            this.setState({ show: false })\n            this.refreshPage();\n        });\n        \n    }\n    \n    render() {\n        return (\n            <div>\n                <button type=\"button\" id=\"create-product\" className=\"btn btn-primary btn-sm\" onClick={this.handleShow}>\n                   Create\n                </button>\n                <Modal \n                    show={this.state.show} \n                    onHide={this.closeModal}\n                    aria-labelledby=\"ModalHeader\"\n                >\n                    <Modal.Header className=\"modal-header\" closeButton>\n                        <Modal.Title id='ModalHeader'>Add New Product</Modal.Title>\n                    </Modal.Header>\n                    <form onSubmit={this.handleSubmit}>\n                        <Modal.Body className=\"modal-body\">\n                            <div className=\"row mr-1\">\n                                <div className=\"col-md-6 form-line\">\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"inputTitle\">Product Name\n                                            <input\n                                                type=\"text\"\n                                                id=\"inputTitle\"\n                                                className=\"form-control\"\n                                                name=\"inputTitle\"\n                                                placeholder=\"Enter Title\"\n                                                value={this.state.inputTitle}\n                                                onChange={this.handleInputChange}/>\n                                        </label>\n                                    </div>\n                                    <div className=\"form-group\">\n                                    <label htmlFor=\"inputDescription\">Description\n                                        <input \n                                            type=\"text\" \n                                            id=\"inputDescription\" \n                                            className=\"form-control\"\n                                            name=\"inputDescription\"\n                                            placeholder=\"Enter Description\"\n                                            value={this.state.inputDescription}\n                                            onChange={this.handleInputChange}/></label>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"inputImage\">Image</label>\n                                        <br />\n                                            <input \n                                                type=\"text\" \n                                                id=\"inputImage\" \n                                                className=\"form-control\"\n                                                name=\"inputImage\" \n                                                placeholder=\"URL\" \n                                                value={this.state.inputImage}\n                                                onChange={this.handleInputChange}/>\n\n                                        </div>\n                                </div>\n                                <div className=\"col-md-6 form-line mb-3\">\n                                    <div className=\"form-group\">\n                                        <div className=\"col-sm-6 form-padding-right\">\n                                            <label htmlFor=\"inputQuantity\">Quantity \n                                                <br />\n                                                <input\n                                                    type=\"text\"\n                                                    id=\"inputQuantity\"\n                                                    className=\"form-control\"\n                                                    name=\"inputQuantity\"\n                                                    value={this.state.inputQuantity}\n                                                    onChange={this.handleInputChange}/>\n                                            </label>\n                                            <br />\n                                        </div>\n                                        <div className=\"form-group\">\n                                        <div className=\"col-sm-6\">\n                                            <label htmlFor=\"inputPrice\">Price</label>\n                                            \n                                            <input \n                                                type=\"text\" \n                                                id=\"inputPrice\" \n                                                className=\"form-control\"\n                                                name=\"inputPrice\" \n                                                value={this.state.inputPrice}\n                                                onChange={this.handleInputChange}/>\n                                        </div>\n                                        \n                                    </div>\n                                    \n                                    </div>\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer className=\"modal-footer\">\n                            <input onClick={this.handleSubmit} type=\"submit\" value=\"Submit\"/>\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n            </div>\n        )\n    }\n}\n \nexport default Buttons;","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Delete(props) {\n\n        return (\n                <span id=\"delete-product\" {...props} role=\"button\" tabIndex=\"0\" className=\"btn btn-danger btn-sm\">\n                    X\n                </span>\n            \n\n        );\n\n}\n\nexport default Delete;","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport API from \"../utils/API\";\nimport Buttons from \"../Buttons/index\";\nimport Delete from \"../Delete/index\";\n\nconst sortTypes = {\n\tup: {\n\t\tclass: 'sort-up',\n\t\tfn: (a, b) => a.net_worth - b.net_worth\n\t},\n\tdown: {\n\t\tclass: 'sort-down',\n\t\tfn: (a, b) => b.net_worth - a.net_worth\n\t},\n\tdefault: {\n\t\tclass: 'sort',\n\t\tfn: (a, b) => a\n\t}\n};\n\nclass ProductGrid extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      product: [],\n      currentSort: \"default\"\n    };\n  }\n\n  componentDidMount() {\n    this.loadProducts();\n  }\n\n  loadProducts = () => {\n    API.getProducts().then((res) => {\n      const products = res.data.map((data) => ({\n        image: data.image,\n        title: data.title,\n        description: data.description,\n        quantity: data.quantity,\n        price: data.price,\n        id: data.id,\n      }));\n      this.setState({\n        product: products,\n      });\n    });\n  };\n\n  deleteProduct = (id) => {\n    console.log(id);\n    API.deleteProduct(id)\n\n      .then((res) => this.loadProducts())\n      .catch((err) => console.log(err));\n  };\n\n  onSortChange = () => {\n      const { currentSort } = this.state;\n      let nextSort;\n \n      if (currentSort === \"down\") nextSort = \"up\";\n      else if (currentSort === \"up\") nextSort = \"default\";\n      else if (currentSort === \"default\") nextSort = \"down\";\n\n      this.setState({\n          currentSort: nextSort\n      });\n  };\n\n  render() {\n    const { data } = this.props;\n    const { currentSort } = this.state;\n    return (\n      <div className=\" container main my-5\">\n        <div className=\"row\">\n          <div className=\"col-8\">\n            <h3>Products</h3>\n          </div>\n          <div className=\"col-4 float-right\">\n            <Buttons />\n          </div>\n        </div>\n        <div className=\"row\">\n          <table id=\"pGrid\" className=\"table table-striped\">\n            <thead className=\"thead-dark\">\n              <tr>\n                <th scope=\"col\">\n                  ID\n                </th>\n                <th scope=\"col\">Image</th>\n                <th scope=\"col\">\n                  Product Name\n                </th>\n                <th scope=\"col\">Description</th>\n                <th scope=\"col\">\n                    Quantity\n                </th>\n                <th scope=\"col\">\n                    <button onClick={this.onSortChange}>\n                  Price\n                  </button>\n                </th>\n                <th scope=\"col\">DELETE</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.product.map((data) => (\n                <tr key={data.id}>\n                  <td>{data.id}</td>\n                  <td>\n                    <img src={data.image} alt=\"productImage\"></img>\n                  </td>\n                  <td className=\"title\">{data.title}</td>\n                  <td>{data.description}</td>\n                  <td>{data.quantity}</td>\n                  <td>${data.price}</td>\n                  <td>\n                    <Delete onClick={() => this.deleteProduct(data.id)} />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default ProductGrid;\n","import React from 'react';\nimport ProductGrid from \"./components/Product-Grid\";\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ProductGrid /> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}